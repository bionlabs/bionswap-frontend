{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  MOONBEAM = 1284,\r\n  OPTIMISM = 10,\r\n  KAVA = 2222,\r\n  METIS = 1088,\r\n  KLAYTN = 8217,\r\n  GNOSIS = 100\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  ETHEREUM = 'ethereum',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  MOONBEAM = 'moonbeam',\r\n  OPTIMISM = 'optimism',\r\n  KAVA = 'kava',\r\n  METIS = 'metis',\r\n  KLAYTN = 'klaytn',\r\n  GNOSIS = 'gnosis',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types';\r\nimport { ChainId } from '../enums';\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\r\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\r\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: '',\r\n  [ChainId.PALM]: '',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\r\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\r\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\r\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\r\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\r\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\r\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\r\n};\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\r\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\r\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n  [ChainId.BSC_TESTNET]: '0x16227D60f7a0e586C66B005219dfc887D13C9531',\r\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\r\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\r\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\r\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\r\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\r\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\r\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\r\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\r\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\r\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\r\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\r\n  [ChainId.KAVA]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.METIS]: '0xEA32A96608495e54156Ae48931A7c20f0dcc1a21',\r\n};\r\n\r\nexport const BUSD_ADDRESS: AddressMap = {\r\n  [ChainId.BSC]: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n  [ChainId.BSC_TESTNET]: '0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47',\r\n};\r\n\r\n// export const USD_ADDRESS: AddressMap = {\r\n//   [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n//   [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\r\n//   [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\r\n//   [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n//   [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\r\n//   [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\r\n//   [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n//   [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\r\n//   [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\r\n//   [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\r\n//   [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\r\n//   [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\r\n//   [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\r\n//   [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\r\n//   [ChainId.CELO]: \"0x765DE816845861e75A25fCA122bb6898B8B1282a\",\r\n//   [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\r\n//   [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\r\n//   [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\r\n//   [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\r\n//   [ChainId.KAVA]: USDC_ADDRESS[ChainId.KAVA],\r\n//   [ChainId.METIS]: USDC_ADDRESS[ChainId.METIS],\r\n// };\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\r\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\r\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\r\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\r\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\r\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\r\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\r\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\r\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\r\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\r\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\r\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\r\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\r\n  [ChainId.KAVA]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.METIS]: '0x420000000000000000000000000000000000000A',\r\n};\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\r\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\r\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\r\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\r\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\r\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\r\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\r\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\r\n  [ChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\r\n  [ChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\r\n};\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\r\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\r\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\r\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\r\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\r\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\r\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\r\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.KAVA]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\r\n  [ChainId.METIS]: '0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0',\r\n};\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\r\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n  [ChainId.BSC_TESTNET]: '0xA11c8D9DC9b66E209Ef60F0C8D969D3CD988782c',\r\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\r\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\r\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\r\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\r\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\r\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\r\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\r\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\r\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\r\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\r\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\r\n  [ChainId.KAVA]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.METIS]: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\r\n};\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\r\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\r\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\r\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\r\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\r\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\r\n};\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\r\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\r\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\r\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\r\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\r\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\r\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\r\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\r\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\r\n};\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xca143ce32fe78f1f7019d7d551a6402fc5350c73',\r\n  [ChainId.BSC_TESTNET]: '0x6725F303b657a9451d8BA641348b6761A6CC7a17',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0x709102921812B3276A65092Fe79eDfc76c4D4AFe',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\r\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n};\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x10ed43c718714eb63d5aa57b78b54704e256024e',\r\n  [ChainId.BSC_TESTNET]: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x865bfde337C8aFBffF144Ff4C29f9404EBb22b15',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\r\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n};\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n};\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n};\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n};\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n};\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\r\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\r\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\r\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\r\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KAVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.METIS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n};\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\r\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n};\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\r\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\r\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\r\n};\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\r\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\r\n};\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\r\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\r\n};\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564';\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065';\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f';\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\r\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\r\n};\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\r\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\r\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n};\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\r\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\r\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\r\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\r\n  [ChainId.KAVA]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.METIS]: '0x1334c8e873E1cae8467156e2A81d1C8b566B2da1',\r\n};\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n};\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n};\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n};\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\r\n};\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\r\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\r\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.MATIC_TESTNET]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.BSC]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.BSC_TESTNET]: '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4',\r\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\r\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n};\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\r\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\r\n};\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  // [ChainId.ROPSTEN]: '',\r\n  // [ChainId.RINKEBY]: '',\r\n  // [ChainId.GÖRLI]: '',\r\n  // [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\r\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\r\n  // [ChainId.HECO]: '',\r\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\r\n  // [ChainId.OKEX]: '',\r\n  // [ChainId.OKEX_TESTNET]: '',\r\n  // [ChainId.PALM]: '',\r\n  // [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\r\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\r\n};\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\r\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\r\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\r\n  [ChainId.KOVAN]: ChainKey.KOVAN,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.FANTOM]: ChainKey.FANTOM,\r\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\r\n  [ChainId.XDAI]: ChainKey.XDAI,\r\n  [ChainId.BSC]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\r\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\r\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\r\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\r\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\r\n  [ChainId.HECO]: ChainKey.HECO,\r\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\r\n  [ChainId.HARMONY]: ChainKey.HARMONY,\r\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\r\n  [ChainId.OKEX]: ChainKey.OKEX,\r\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\r\n  [ChainId.CELO]: ChainKey.CELO,\r\n  [ChainId.PALM]: ChainKey.PALM,\r\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\r\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\r\n  [ChainId.FUSE]: ChainKey.FUSE,\r\n  [ChainId.TELOS]: ChainKey.TELOS,\r\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\r\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\r\n  [ChainId.KAVA]: ChainKey.KAVA,\r\n  [ChainId.METIS]: ChainKey.METIS,\r\n}\r\n","import { ChainId } from \"../enums/ChainId\";\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.ROPSTEN]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.RINKEBY]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.GÖRLI]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.KOVAN]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.FANTOM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MATIC]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MATIC_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.XDAI]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.BSC]: \"0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\",\r\n  [ChainId.BSC_TESTNET]: \"0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\",\r\n  [ChainId.ARBITRUM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONBEAM_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.AVALANCHE]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.AVALANCHE_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HECO]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HECO_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HARMONY]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.HARMONY_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.OKEX]: \"0xe3ae0327539fda6ee87492b9ce166b7419808c231acd1fe54dd3fbf7754704f5\",\r\n  [ChainId.OKEX_TESTNET]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.CELO]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.PALM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONRIVER]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.FUSE]: \"0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5\",\r\n  [ChainId.TELOS]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n  [ChainId.MOONBEAM]: \"0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\",\r\n};\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types';\r\nimport { BUSD_ADDRESS, SUSHI_ADDRESS, USDC_ADDRESS, USDT_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses';\r\n\r\nimport { ChainId } from '../enums';\r\nimport { Token } from '../entities/Token';\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, USDC_ADDRESS[ChainId.BSC_TESTNET], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, USDC_ADDRESS[ChainId.KAVA], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, USDC_ADDRESS[ChainId.METIS], 6, 'USDC', 'USD Coin'),\r\n};\r\n\r\nexport const BUSD: TokenMap = {\r\n  [ChainId.BSC]: new Token(ChainId.BSC, BUSD_ADDRESS[ChainId.BSC], 18, 'BUSD', 'BUSD Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, BUSD_ADDRESS[ChainId.BSC_TESTNET], 18, 'BUSD', 'BUSD Coin'),\r\n};\r\n\r\nexport const USDT: TokenMap = {\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDT_ADDRESS[ChainId.OKEX], 18, 'USDT', 'USDT Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDT_ADDRESS[ChainId.BSC], 18, 'USDT', 'USDT Coin'),\r\n  [ChainId.BSC_TESTNET]: new Token(ChainId.BSC_TESTNET, USDT_ADDRESS[ChainId.BSC_TESTNET], 18, 'USDT', 'USDT Coin'),\r\n};\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  ...USDT,\r\n  ...BUSD,\r\n  [ChainId.CELO]: new Token(ChainId.CELO, USDC_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\r\n};\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WETH9_ADDRESS[ChainId.KAVA], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WETH9_ADDRESS[ChainId.METIS], 18, 'WETH', 'Wrapped Ether'),\r\n};\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM',\r\n  ),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic',\r\n  ),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n  ),\r\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether',\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX',\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT',\r\n  ),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE',\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain',\r\n  ),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\r\n  [ChainId.MOONRIVER]: new Token(\r\n    ChainId.MOONRIVER,\r\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\r\n    18,\r\n    'WMOVR',\r\n    'Wrapped Moonriver',\r\n  ),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WNATIVE_ADDRESS[ChainId.KAVA], 18, 'WKAVA', 'Wrapped Kava'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WNATIVE_ADDRESS[ChainId.METIS], 18, 'WMETIS', 'Wrapped Metis'),\r\n};\r\n\r\nexport const SUSHI: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, SUSHI_ADDRESS[ChainId.KAVA], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, SUSHI_ADDRESS[ChainId.METIS], 18, 'SUSHI', 'SushiToken'),\r\n};\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Glmr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glmr } = {}\r\n\r\n  public static onChain(chainId: number): Glmr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Kava extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'KAVA', 'Kava')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Kava } = {}\r\n\r\n  public static onChain(chainId: number): Kava {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Metis extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'METIS', 'Metis')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Metis } = {}\r\n\r\n  public static onChain(chainId: number): Metis {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Glmr,\r\n  Harmony,\r\n  Heco,\r\n  Kava,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Palm,\r\n  Telos,\r\n  xDai,\r\n  Metis,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\r\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\r\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\r\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\r\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\r\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\r\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\r\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\r\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\r\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\r\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\r\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\r\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\r\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\r\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\r\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\r\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\r\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\r\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\r\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\r\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\r\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\r\n  [ChainId.KAVA]: Kava.onChain(ChainId.KAVA),\r\n  [ChainId.METIS]: Metis.onChain(ChainId.METIS),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { RoundingMode } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import {\r\n  FACTORY_ADDRESS,\r\n  FIVE,\r\n  MINIMUM_LIQUIDITY,\r\n  ONE,\r\n  ZERO,\r\n  _1000,\r\n  _997,\r\n} from \"../constants\";\r\nimport {\r\n  InsufficientInputAmountError,\r\n  InsufficientReservesError,\r\n} from \"../errors\";\r\n\r\nimport { BigintIsh } from \"../types\";\r\nimport { CurrencyAmount } from \"./CurrencyAmount\";\r\nimport JSBI from \"jsbi\";\r\nimport { Price } from \"./Price\";\r\nimport { Token } from \"./Token\";\r\nimport { computePairAddress } from \"../functions/computePairAddress\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { sqrt } from \"../functions/math\";\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token;\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>];\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    });\r\n  }\r\n\r\n  public constructor(\r\n    currencyAmountA: CurrencyAmount<Token>,\r\n    currencyAmountB: CurrencyAmount<Token>\r\n  ) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(\r\n      currencyAmountB.currency\r\n    ) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA];\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      \"UNI-V2\",\r\n      \"Uniswap V2\"\r\n    );\r\n    this.tokenAmounts = currencyAmounts as [\r\n      CurrencyAmount<Token>,\r\n      CurrencyAmount<Token>\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1);\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\r\n    return new Price(\r\n      this.token0,\r\n      this.token1,\r\n      result.denominator,\r\n      result.numerator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\r\n    return new Price(\r\n      this.token1,\r\n      this.token0,\r\n      result.denominator,\r\n      result.numerator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId;\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency;\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency;\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0];\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1];\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n  }\r\n\r\n  public getOutputAmount(\r\n    inputAmount: CurrencyAmount<Token>\r\n  ): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), \"TOKEN\");\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO)\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency);\r\n    const outputReserve = this.reserveOf(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    );\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\r\n    const denominator = JSBI.add(\r\n      JSBI.multiply(inputReserve.quotient, _1000),\r\n      inputAmountWithFee\r\n    );\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    );\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n    return [\r\n      outputAmount,\r\n      new Pair(\r\n        inputReserve.add(inputAmount),\r\n        outputReserve.subtract(outputAmount)\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public getInputAmount(\r\n    outputAmount: CurrencyAmount<Token>\r\n  ): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), \"TOKEN\");\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(\r\n        outputAmount.quotient,\r\n        this.reserveOf(outputAmount.currency).quotient\r\n      )\r\n    ) {\r\n      throw new InsufficientReservesError();\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency);\r\n    const inputReserve = this.reserveOf(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    );\r\n    const numerator = JSBI.multiply(\r\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\r\n      _1000\r\n    );\r\n    const denominator = JSBI.multiply(\r\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\r\n      _997\r\n    );\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    );\r\n    return [\r\n      inputAmount,\r\n      new Pair(\r\n        inputReserve.add(inputAmount),\r\n        outputReserve.subtract(outputAmount)\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), \"LIQUIDITY\");\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\r\n      tokenAmountB.currency\r\n    ) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA];\r\n    invariant(\r\n      tokenAmounts[0].currency.equals(this.token0) &&\r\n        tokenAmounts[1].currency.equals(this.token1),\r\n      \"TOKEN\"\r\n    );\r\n\r\n    let liquidity: JSBI;\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      );\r\n    } else {\r\n      const amount0 = JSBI.divide(\r\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\r\n        this.reserve0.quotient\r\n      );\r\n      const amount1 = JSBI.divide(\r\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\r\n        this.reserve1.quotient\r\n      );\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(\r\n          JSBI.multiply(\r\n            this.tokenAmounts[0].quotient,\r\n            this.tokenAmounts[1].quotient\r\n          )\r\n        ),\r\n      });\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError();\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), \"TOKEN\");\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), \"TOTAL_SUPPLY\");\r\n    invariant(liquidity.currency.equals(this.liquidityToken), \"LIQUIDITY\");\r\n    invariant(\r\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\r\n      \"LIQUIDITY\"\r\n    );\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>;\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply;\r\n    } else {\r\n      invariant(!!kLast, \"K_LAST\");\r\n      const kLastParsed = JSBI.BigInt(kLast);\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(\r\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\r\n        );\r\n        const rootKLast = sqrt(kLastParsed);\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(\r\n            totalSupply.quotient,\r\n            JSBI.subtract(rootK, rootKLast)\r\n          );\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n          const feeLiquidity = JSBI.divide(numerator, denominator);\r\n          totalSupplyAdjusted = totalSupply.add(\r\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\r\n          );\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply;\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply;\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(\r\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\r\n        totalSupplyAdjusted.quotient\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","KAVA","METIS","USDC_ADDRESS","MATIC_TESTNET","BSC_TESTNET","OPTIMISM","BUSD_ADDRESS","WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","DAI_ADDRESS","USDT_ADDRESS","MIM_ADDRESS","FRAX_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","NativeCurrency","_this","_inheritsLoose","validateAndParseAddress","address","getAddress","error","Token","_proto","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","BUSD","USDT","USD","WETH9","WNATIVE","SUSHI","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","Glmr","Kava","Metis","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","arguments","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}